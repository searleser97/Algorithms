\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}bits/stdc++.h\PYGZgt{}}

\PYG{k}{using} \PYG{k}{namespace} \PYG{n}{std}\PYG{p}{;}
\PYG{k}{template} \PYG{o}{\PYGZlt{}}\PYG{k}{class} \PYG{n+nc}{T}\PYG{o}{\PYGZgt{}} \PYG{k}{class} \PYG{n+nc}{UnionFind} \PYG{p}{\PYGZob{}}
\PYG{k}{public}\PYG{o}{:}
    \PYG{c+c1}{// stores the parent of each node}
    \PYG{n}{unordered\PYGZus{}map}\PYG{o}{\PYGZlt{}}\PYG{n}{T}\PYG{p}{,} \PYG{n}{T}\PYG{o}{\PYGZgt{}} \PYG{n}{tree}\PYG{p}{;}
    \PYG{c+c1}{// stores the size of each sub\PYGZhy{}tree}
    \PYG{n}{unordered\PYGZus{}map}\PYG{o}{\PYGZlt{}}\PYG{n}{T}\PYG{p}{,} \PYG{k+kt}{int}\PYG{o}{\PYGZgt{}} \PYG{n}{treeSize}\PYG{p}{;}
    \PYG{k+kt}{void} \PYG{n+nf}{addEdge}\PYG{p}{(}\PYG{n}{T} \PYG{n}{v}\PYG{p}{,} \PYG{n}{T} \PYG{n}{w}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{k}{if} \PYG{p}{(}\PYG{o}{!}\PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{.}\PYG{n}{count}\PYG{p}{(}\PYG{n}{v}\PYG{p}{))} \PYG{p}{\PYGZob{}}
            \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{=} \PYG{n}{v}\PYG{p}{;}
            \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{treeSize}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{=} \PYG{l+m+mi}{1}\PYG{p}{;}
        \PYG{p}{\PYGZcb{}}
        \PYG{k}{if} \PYG{p}{(}\PYG{o}{!}\PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{.}\PYG{n}{count}\PYG{p}{(}\PYG{n}{w}\PYG{p}{))} \PYG{p}{\PYGZob{}}
            \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{w}\PYG{p}{]} \PYG{o}{=} \PYG{n}{w}\PYG{p}{;}
            \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{treeSize}\PYG{p}{[}\PYG{n}{w}\PYG{p}{]} \PYG{o}{=} \PYG{l+m+mi}{1}\PYG{p}{;}
        \PYG{p}{\PYGZcb{}}
        \PYG{n}{T} \PYG{n}{i} \PYG{o}{=} \PYG{n}{setGetRoot}\PYG{p}{(}\PYG{n}{v}\PYG{p}{);}
        \PYG{n}{T} \PYG{n}{j} \PYG{o}{=} \PYG{n}{setGetRoot}\PYG{p}{(}\PYG{n}{w}\PYG{p}{);}
        \PYG{k}{if} \PYG{p}{(}\PYG{n}{i} \PYG{o}{==} \PYG{n}{j}\PYG{p}{)}
            \PYG{k}{return}\PYG{p}{;}
        \PYG{k}{if} \PYG{p}{(}\PYG{n}{treeSize}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{\PYGZlt{}} \PYG{n}{treeSize}\PYG{p}{[}\PYG{n}{j}\PYG{p}{])} \PYG{p}{\PYGZob{}}
            \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{=} \PYG{n}{j}\PYG{p}{;}
            \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{treeSize}\PYG{p}{[}\PYG{n}{j}\PYG{p}{]} \PYG{o}{+=} \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{treeSize}\PYG{p}{[}\PYG{n}{i}\PYG{p}{];}
        \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{p}{\PYGZob{}}
            \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{j}\PYG{p}{]} \PYG{o}{=} \PYG{n}{i}\PYG{p}{;}
            \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{treeSize}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{+=} \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{treeSize}\PYG{p}{[}\PYG{n}{j}\PYG{p}{];}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

    \PYG{k+kt}{bool} \PYG{n+nf}{areVertexesConnected}\PYG{p}{(}\PYG{n}{T} \PYG{n}{v}\PYG{p}{,} \PYG{n}{T} \PYG{n}{w}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{k}{if} \PYG{p}{(}\PYG{o}{!}\PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{.}\PYG{n}{count}\PYG{p}{(}\PYG{n}{v}\PYG{p}{)} \PYG{o}{||} \PYG{o}{!}\PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{.}\PYG{n}{count}\PYG{p}{(}\PYG{n}{w}\PYG{p}{))}
            \PYG{k}{return} \PYG{n+nb}{false}\PYG{p}{;}
        \PYG{k}{return} \PYG{n}{setGetRoot}\PYG{p}{(}\PYG{n}{v}\PYG{p}{)} \PYG{o}{==} \PYG{n}{setGetRoot}\PYG{p}{(}\PYG{n}{w}\PYG{p}{);}
    \PYG{p}{\PYGZcb{}}

\PYG{k}{private}\PYG{o}{:}
    \PYG{n}{T} \PYG{n}{setGetRoot}\PYG{p}{(}\PYG{n}{T} \PYG{n}{v}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{k}{while} \PYG{p}{(}\PYG{n}{v} \PYG{o}{!=} \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{v}\PYG{p}{])}
            \PYG{n}{v} \PYG{o}{=} \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]} \PYG{o}{=} \PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{[}\PYG{k}{this}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]];}
        \PYG{k}{return} \PYG{n}{v}\PYG{p}{;}
    \PYG{p}{\PYGZcb{}}

\PYG{p}{\PYGZcb{};}

\PYG{n}{string} \PYG{n+nf}{input}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{n}{string} \PYG{n}{ans}\PYG{p}{;}
    \PYG{n}{getline}\PYG{p}{(}\PYG{n}{cin}\PYG{p}{,} \PYG{n}{ans}\PYG{p}{);}
    \PYG{k}{return} \PYG{n}{ans}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{n}{string}\PYG{o}{\PYGZgt{}} \PYG{n}{split}\PYG{p}{(}\PYG{n}{string} \PYG{n}{str}\PYG{p}{,} \PYG{k+kt}{char} \PYG{n}{token}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{n}{stringstream} \PYG{n}{test}\PYG{p}{(}\PYG{n}{str}\PYG{p}{);}
    \PYG{n}{string} \PYG{n}{segment}\PYG{p}{;}
    \PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{n}{std}\PYG{o}{::}\PYG{n}{string}\PYG{o}{\PYGZgt{}} \PYG{n}{seglist}\PYG{p}{;}

    \PYG{k}{while} \PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{getline}\PYG{p}{(}\PYG{n}{test}\PYG{p}{,} \PYG{n}{segment}\PYG{p}{,} \PYG{n}{token}\PYG{p}{))}
        \PYG{n}{seglist}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{segment}\PYG{p}{);}
    \PYG{k}{return} \PYG{n}{seglist}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/*int main() \PYGZob{}}
\PYG{c+cm}{    string str;}
\PYG{c+cm}{    int t;}
\PYG{c+cm}{    t = stoi(input());}
\PYG{c+cm}{    str = input();}
\PYG{c+cm}{    while (t\PYGZhy{}\PYGZhy{}) \PYGZob{}}
\PYG{c+cm}{        auto g = new UnionFind\PYGZlt{}int\PYGZgt{}();}
\PYG{c+cm}{        int ac = 0, wa = 0;}
\PYG{c+cm}{        int n;}
\PYG{c+cm}{        n = stoi(input());}
\PYG{c+cm}{        while (n\PYGZhy{}\PYGZhy{}) \PYGZob{}}
\PYG{c+cm}{            g\PYGZhy{}\PYGZgt{}addEdge(n + 1, n + 1);}
\PYG{c+cm}{        \PYGZcb{}}
\PYG{c+cm}{        while (true) \PYGZob{}}
\PYG{c+cm}{            vector\PYGZlt{}string\PYGZgt{} vals = split(input(), \PYGZsq{} \PYGZsq{});}
\PYG{c+cm}{            if (vals.size() == 0)}
\PYG{c+cm}{                break;}
\PYG{c+cm}{            if (vals[0] == \PYGZdq{}c\PYGZdq{}) \PYGZob{}}
\PYG{c+cm}{                g\PYGZhy{}\PYGZgt{}addEdge(stoi(vals[1]), stoi(vals[2]));}
\PYG{c+cm}{            \PYGZcb{}}
\PYG{c+cm}{            if (vals[0] == \PYGZdq{}q\PYGZdq{}) \PYGZob{}}
\PYG{c+cm}{                if (g\PYGZhy{}\PYGZgt{}areVertexesConnected(stoi(vals[1]), stoi(vals[2]))) \PYGZob{}}
\PYG{c+cm}{                    ac++;}
\PYG{c+cm}{                \PYGZcb{}}
\PYG{c+cm}{                else \PYGZob{}}
\PYG{c+cm}{                    wa++;}
\PYG{c+cm}{                \PYGZcb{}}
\PYG{c+cm}{            \PYGZcb{}}
\PYG{c+cm}{        \PYGZcb{}}
\PYG{c+cm}{        cout \PYGZlt{}\PYGZlt{} ac \PYGZlt{}\PYGZlt{} \PYGZdq{},\PYGZdq{} \PYGZlt{}\PYGZlt{} wa \PYGZlt{}\PYGZlt{} \PYGZdq{}\PYGZbs{}n\PYGZdq{};}
\PYG{c+cm}{        if (t != 0)}
\PYG{c+cm}{            cout \PYGZlt{}\PYGZlt{} \PYGZdq{}\PYGZbs{}n\PYGZdq{};}
\PYG{c+cm}{        delete g;}
\PYG{c+cm}{    \PYGZcb{}}
\PYG{c+cm}{    return 0;}
\PYG{c+cm}{\PYGZcb{}*/}
\end{Verbatim}
